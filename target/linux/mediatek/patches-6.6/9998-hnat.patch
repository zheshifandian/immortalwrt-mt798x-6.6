--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -51,7 +51,8 @@ obj-$(CONFIG_ADIN_PHY)		+= adin.o
 obj-$(CONFIG_ADIN1100_PHY)	+= adin1100.o
 obj-$(CONFIG_AIROHA_EN8801SC_PHY)   += en8801sc.o
 obj-$(CONFIG_AIR_AN8855_PHY)		+= air_an8855.o
-obj-$(CONFIG_AIR_EN8811H_PHY)   += air_en8811h.o
+air_en8811-y := air_en8811h_main.o air_en8811h_api.o
+obj-$(CONFIG_AIR_EN8811H_PHY)   += air_en8811.o
 obj-$(CONFIG_AMD_PHY)		+= amd.o
 obj-$(CONFIG_AQUANTIA_PHY)	+= aquantia/
 obj-$(CONFIG_AX88796B_PHY)	+= ax88796b.o
--- a/drivers/net/phy/mediatek/mtk-ge-soc.c
+++ b/drivers/net/phy/mediatek/mtk-ge-soc.c
@@ -1208,7 +1208,7 @@ static int mt798x_phy_calibration(struct
 
 	if (!buf[0] || !buf[1] || !buf[2] || !buf[3] || len < 4 * sizeof(u32)) {
 		phydev_err(phydev, "invalid efuse data\n");
-		ret = -EINVAL;
+		ret = 0;
 		goto out;
 	}
 
@@ -1463,6 +1463,7 @@ static struct phy_driver mtk_socphy_driv
 		.config_intr	= genphy_no_config_intr,
 		.handle_interrupt = genphy_handle_interrupt_no_ack,
 		.probe		= mt7981_phy_probe,
+		.read_status	= mtk_gphy_cl22_read_status,
 		.suspend	= genphy_suspend,
 		.resume		= genphy_resume,
 		.read_page	= mtk_phy_read_page,
@@ -1480,6 +1481,7 @@ static struct phy_driver mtk_socphy_driv
 		.config_intr	= genphy_no_config_intr,
 		.handle_interrupt = genphy_handle_interrupt_no_ack,
 		.probe		= mt7988_phy_probe,
+		.read_status	= mtk_gphy_cl22_read_status,
 		.suspend	= genphy_suspend,
 		.resume		= genphy_resume,
 		.read_page	= mtk_phy_read_page,
--- a/drivers/net/phy/mediatek/mtk.h
+++ b/drivers/net/phy/mediatek/mtk.h
@@ -11,12 +11,30 @@
 #define MTK_EXT_PAGE_ACCESS			0x1f
 #define MTK_PHY_PAGE_STANDARD			0x0000
 #define MTK_PHY_PAGE_EXTENDED_1			0x0001
+#define MTK_PHY_AUX_CTRL_AND_STATUS		0x14
+/* suprv_media_select_RefClk */
+#define   MTK_PHY_LP_DETECTED_MASK		GENMASK(7, 6)
+#define   MTK_PHY_ENABLE_DOWNSHIFT		BIT(4)
+#define MTK_PHY_PAGE_EXTENDED_1			0x0001
 #define MTK_PHY_PAGE_EXTENDED_52B5		0x52b5
 #define MTK_PHY_AUX_CTRL_AND_STATUS		0x14
 
 /* suprv_media_select_RefClk */
 #define   MTK_PHY_ENABLE_DOWNSHIFT		BIT(4)
 
+/* Registers on Token Ring debug nodes */
+/* ch_addr = 0x0, node_addr = 0xf, data_addr = 0x2 */
+#define   AN_STATE_MASK			GENMASK(22, 19)
+#define   AN_STATE_SHIFT		19
+#define   AN_STATE_TX_DISABLE		1
+
+/* ch_addr = 0x0, node_addr = 0xf, data_addr = 0x3c */
+#define AN_NEW_LP_CNT_LIMIT_MASK		GENMASK(23, 20)
+#define AUTO_NP_10XEN				BIT(6)
+
+/* Registers on MDIO_MMD_VEND1 */
+#define MTK_PHY_LINK_STATUS_MISC	(0xa2)
+#define   MTK_PHY_FINAL_SPEED_1000	BIT(3)
 /* Registers on MDIO_MMD_VEND2 */
 #define MTK_PHY_LED0_ON_CTRL			0x24
 #define MTK_PHY_LED1_ON_CTRL			0x26
@@ -81,7 +99,7 @@ void __mtk_tr_set_bits(struct phy_device
 		       u8 data_addr, u32 set);
 void __mtk_tr_clr_bits(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
 		       u8 data_addr, u32 clr);
-
+int mtk_gphy_cl22_read_status(struct phy_device *phydev);
 int mtk_phy_read_page(struct phy_device *phydev);
 int mtk_phy_write_page(struct phy_device *phydev, int page);
 
--- a/drivers/net/phy/mediatek/mtk-phy-lib.c
+++ b/drivers/net/phy/mediatek/mtk-phy-lib.c
@@ -361,6 +361,45 @@ void mtk_phy_leds_state_init(struct phy_
 }
 EXPORT_SYMBOL_GPL(mtk_phy_leds_state_init);
 
+int mtk_gphy_cl22_read_status(struct phy_device *phydev)
+{
+	int ret;
+
+	ret = genphy_read_status(phydev);
+	if (ret)
+		return ret;
+
+	if (phydev->autoneg == AUTONEG_ENABLE && !phydev->autoneg_complete) {
+		ret = phy_read_paged(phydev, MTK_PHY_PAGE_EXTENDED_1,
+				     MTK_PHY_AUX_CTRL_AND_STATUS);
+		if (ret < 0)
+			return ret;
+
+		/* Once LP_DETECTED is set, it means that"ability_match" in
+		 * IEEE 802.3 Figure 28-18 is set. This happens after we plug in
+		 * cable. Also, LP_DETECTED will be cleared after AN complete.
+		 */
+		if (!FIELD_GET(MTK_PHY_LP_DETECTED_MASK, ret)){
+			if (phydev->link !=1){
+                        	phydev->link = 1;
+                        	phydev->speed = SPEED_1000;
+                        	phydev->duplex = DUPLEX_FULL;
+			}
+			return 0;
+		}
+
+		ret = phy_read(phydev, MII_CTRL1000);
+		//if (ret & (ADVERTISE_1000FULL | ADVERTISE_1000HALF)) {
+		//	ret = extend_an_new_lp_cnt_limit(phydev);
+		//	if (ret < 0)
+		//		return ret;
+		//	}
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(mtk_gphy_cl22_read_status);
+
 MODULE_DESCRIPTION("MediaTek Ethernet PHY driver common");
 MODULE_AUTHOR("Sky Huang <SkyLake.Huang@mediatek.com>");
 MODULE_AUTHOR("Daniel Golle <daniel@makrotopia.org>");
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -439,7 +439,7 @@
 
 /* QDMA TX NUM */
 #define QID_BITS_V2(x)		(((x) & 0x3f) << 16)
-#define MTK_QDMA_GMAC2_QID	8
+#define MTK_QDMA_GMAC2_QID	32
 
 #define MTK_TX_DMA_BUF_SHIFT	8
 
--- a/drivers/net/ethernet/mediatek/mtk_eth_dbg.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_dbg.c
@@ -68,7 +68,7 @@ static int qdma_pppq_show(struct seq_fil
 	int i;
 
 	seq_puts(m, "Usage of the QDMA PPPQ for the HW path:\n");
-	for (i = 0; i < MTK_QDMA_NUM_QUEUES; i++)
+	for (i = 0; i < 64; i++)
 		seq_printf(m, "qdma_txq%d:	%5d Mbps %8d refcnt\n",
 			   i, eth->qdma_shaper.speed[i],
 			   atomic_read(&eth->qdma_shaper.refcnt[i]));
@@ -150,7 +150,7 @@ static ssize_t qdma_sched_show(struct fi
 			 "EN\tScheduling\tMAX\tQueue#\n%d\t%s%16d\t", enable,
 			 (scheduling == 1) ? "WRR" : "SP", max_rate);
 
-	for (i = 0; i < MTK_QDMA_NUM_QUEUES; i++) {
+	for (i = 0; i < 64; i++) {
 		mtk_w32(eth, (i / MTK_QTX_PER_PAGE), soc->reg_map->qdma.page);
 		sch_reg = mtk_r32(eth, soc->reg_map->qdma.qtx_sch +
 				       (id % MTK_QTX_PER_PAGE) * MTK_QTX_OFFSET);
@@ -877,7 +877,7 @@ int mtketh_debugfs_init(struct mtk_eth *
 				    &qdma_sched_fops);
 	}
 
-	for (i = 0; i < MTK_QDMA_NUM_QUEUES; i++) {
+	for (i = 0; i < 64; i++) {
 		ret = snprintf(name, sizeof(name), "qdma_txq%d", i);
 		if (ret != strlen(name)) {
 			ret = -ENOMEM;
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -39,11 +39,14 @@
 #if defined(CONFIG_NET_MEDIATEK_HNAT) || defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 #include "mtk_hnat/nf_hnat_mtk.h"
 #endif
-
+static int mtk_wifi_num = 0;
+static int mtk_rest_cnt = 0;
+atomic_t eth1_in_br = ATOMIC_INIT(0);
+EXPORT_SYMBOL(eth1_in_br);
 static int mtk_msg_level = -1;
 module_param_named(msg_level, mtk_msg_level, int, 0);
 MODULE_PARM_DESC(msg_level, "Message level (-1=defaults,0=none,...,16=all)");
-
+DECLARE_COMPLETION(wait_ser_done);
 #define MTK_ETHTOOL_STAT(x) { #x, \
 			      offsetof(struct mtk_hw_stats, x) / sizeof(u64) }
 
@@ -938,7 +941,6 @@ static void mtk_set_queue_speed(struct m
 {
 	const struct mtk_soc_data *soc = eth->soc;
 	u32 ofs, val;
-
 	if (!MTK_HAS_CAPS(soc->caps, MTK_QDMA))
 		return;
 
@@ -1864,6 +1866,12 @@ static int mtk_tx_map(struct sk_buff *sk
 	/* TX SG offload */
 	txd = itxd;
 	txd_pdma = qdma_to_pdma(ring, txd);
+	#if defined(CONFIG_NET_MEDIATEK_HNAT) || defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
+	if (HNAT_SKB_CB2(skb)->magic == 0x78681415) {
+		txd->txd4 &= ~(0xf << TX_DMA_FPORT_SHIFT_V2);
+		txd->txd4 |= 0x3 << TX_DMA_FPORT_SHIFT_V2;
+	}
+#endif
 
 	for (i = 0; i < skb_shinfo(skb)->nr_frags; i++) {
 		skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
@@ -2474,6 +2482,9 @@ static int mtk_poll_rx(struct napi_struc
 			mac = RX_DMA_GET_SPORT(trxd.rxd4) - 1;
 		}
 
+		if ( (mac == 4) || ((FIELD_GET(MTK_RXD4_PPE_CPU_REASON, trxd.rxd4)) == HIT_BIND_FORCE_TO_CPU))
+		mac = atomic_read(&eth1_in_br);
+
 		if (unlikely(mac < 0 || mac >= MTK_MAX_DEVS ||
 			     !eth->netdev[mac]))
 			goto release_desc;
@@ -2611,9 +2622,6 @@ static int mtk_poll_rx(struct napi_struc
 		skb_hnat_alg(skb) = 0;
 		skb_hnat_filled(skb) = 0;
 		skb_hnat_magic_tag(skb) = HNAT_MAGIC_TAG;
-		skb_hnat_set_tops(skb, 0);
-		skb_hnat_set_is_decap(skb, 0);
-		skb_hnat_set_is_decrypt(skb, (skb_hnat_cdrt(skb) ? 1 : 0));
 
 		if (skb_hnat_reason(skb) == HIT_BIND_FORCE_TO_CPU) {
 			trace_printk("[%s] reason=0x%x(force to CPU) from WAN to Ext\n",
@@ -2990,14 +2998,12 @@ static int mtk_tx_alloc(struct mtk_eth *
 			ring->phys + ((ring_size - 1) * sz),
 			soc->reg_map->qdma.crx_ptr);
 		mtk_w32(eth, ring->last_free_ptr, soc->reg_map->qdma.drx_ptr);
-
 		for (i = 0, ofs = 0; i < MTK_QDMA_NUM_QUEUES; i++) {
 			val = (QDMA_RES_THRES << 8) | QDMA_RES_THRES;
 			mtk_w32(eth, val, soc->reg_map->qdma.qtx_cfg + ofs);
 
 			val = MTK_QTX_SCH_MIN_RATE_EN |
 			      MTK_QTX_SCH_LEAKY_BUCKET_SIZE;
-			/* minimum: 10 Mbps */
 			if (mtk_is_netsys_v3_or_greater(eth) &&
 			    (eth->soc->caps != MT7988_CAPS)) {
 				val |= FIELD_PREP(MTK_QTX_SCH_MIN_RATE_MAN_V3, 1) |
@@ -4263,9 +4269,6 @@ static int mtk_open(struct net_device *d
 			}
 			mtk_gdm_config(eth, target_mac->id, gdm_config);
 		}
-		/* Reset and enable PSE */
-		mtk_w32(eth, RST_GL_PSE, MTK_RST_GL);
-		mtk_w32(eth, 0, MTK_RST_GL);
 
 		napi_enable(&eth->tx_napi);
 		napi_enable(&eth->rx_napi[0].napi);
@@ -5447,7 +5450,16 @@ static void mtk_pending_work(struct work
 	 * possible race during FE reset since it can run releasing RTNL lock.
 	 */
 	mtk_prepare_for_reset(eth);
-
+	/* Trigger Wifi SER reset */
+	for (i = 0; i < MTK_MAX_DEVS; i++) {
+		if (!eth->netdev[i])
+			continue;
+		call_netdevice_notifiers(MTK_FE_START_RESET, eth->netdev[i]);
+		rtnl_unlock();
+		wait_for_completion_timeout(&wait_ser_done, 5000);
+		rtnl_lock();
+		break;
+	}
 	/* stop all devices to make sure that dma is properly shut down */
 	for (i = 0; i < MTK_MAX_DEVS; i++) {
 		if (!eth->netdev[i] || !netif_running(eth->netdev[i]))
@@ -5485,7 +5497,14 @@ static void mtk_pending_work(struct work
 
 	mtk_wed_fe_reset_complete();
 	mtk_restore_qdma_cfg(eth);
-
+	for (i = 0; i < MTK_MAX_DEVS; i++) {
+                if (!eth->netdev[i])
+                        continue;
+		call_netdevice_notifiers(MTK_FE_RESET_NAT_DONE, eth->netdev[i]);
+		printk("[%s] HNAT reset done !\n", __func__);
+		call_netdevice_notifiers(MTK_FE_RESET_DONE, eth->netdev[i]);
+		printk("[%s] WiFi SER reset done !\n", __func__);
+        }
 	rtnl_unlock();
 }
 
@@ -5878,10 +5897,7 @@ static u16 mtk_select_queue(struct net_d
 	struct mtk_mac *mac = netdev_priv(dev);
 	unsigned int queue = 0;
 
-	if (netdev_uses_dsa(dev))
-		queue = skb_get_queue_mapping(skb) + 3;
-	else
-		queue = mac->id;
+	queue = mac->id ? 32 : 0;
 
 	if (queue >= dev->num_tx_queues)
 		queue = 0;
@@ -7130,6 +7146,36 @@ static struct platform_driver mtk_driver
 	},
 };
 
+static int mtk_eth_netdevice_event(struct notifier_block *unused,
+				   unsigned long event, void *ptr)
+{
+	switch (event) {
+	case MTK_WIFI_RESET_DONE:
+		mtk_rest_cnt--;
+		if(!mtk_rest_cnt) {
+			complete(&wait_ser_done);
+			mtk_rest_cnt = mtk_wifi_num;
+		}
+		break;
+	case MTK_WIFI_CHIP_ONLINE:
+		mtk_wifi_num++;
+		mtk_rest_cnt = mtk_wifi_num;
+		break;
+	case MTK_WIFI_CHIP_OFFLINE:
+		mtk_wifi_num--;
+		mtk_rest_cnt = mtk_wifi_num;
+		break;
+	default:
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+
+struct notifier_block mtk_eth_netdevice_nb __read_mostly = {
+	.notifier_call = mtk_eth_netdevice_event,
+};
+
 module_platform_driver(mtk_driver);
 
 MODULE_LICENSE("GPL");
